import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import type { PostsWithAuthorResponse, Post } from './postTypes';
import { fetchPosts } from '@/lib/api/posts';

type GetPostsArgs = Pick<PostsWithAuthorResponse, 'limit' | 'skip'>;

export const postsApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: 'https://dummyjson.com' }),
  reducerPath: 'postsApi',
  tagTypes: ['Posts'],
  endpoints: build => ({
    getInfinitePosts: build.infiniteQuery<
      PostsWithAuthorResponse,
      GetPostsArgs,
      number
    >({
      infiniteQueryOptions: {
        initialPageParam: 0,
        getNextPageParam: (lastPage, _pages) => {
          return lastPage.skip + lastPage.limit;
        },
      },
      queryFn: async ({ queryArg: { limit }, pageParam }) => {
        const response = await fetchPosts(limit, pageParam);
        return { data: response };
      },
      providesTags: (_result, _error, { limit, skip }) => {
        return [{ type: 'Posts', id: `${limit}-${skip}` }];
      },
    }),
    getPost: build.query<Post, { id: number }>({
      query: ({ id }) => {
        return { url: `posts/${id}`, method: 'GET' };
      },

      providesTags: (_result, _error, { id }) => {
        return [{ type: 'Posts', id: `${id}` }];
      },
    }),
  }),
});

// Hooks are auto-generated by RTK-Query
export const { useGetInfinitePostsInfiniteQuery, useGetPostQuery, endpoints } =
  postsApiSlice;
